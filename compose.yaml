services:

  database:
    image: postgres:17-alpine
    restart: always
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - internal-service-network

  adminer:
    image: adminer:5
    restart: always
    networks:
      - proxy-network
      - internal-service-network
    depends_on:
      - database

  cache:
    image: redis:latest
    restart: always
    networks:
      - internal-service-network

  app:
    build: ./src/
    command: >
      sh -c "
        # Cd into working directory
        cd /code &&
        # Make database migrations
        python manage.py migrate --no-input &&
        # Create admin if does not exist
        python manage.py setup_admin &&
        # Start production server
        gunicorn app.wsgi:application --bind 0.0.0.0:8000
      "
    env_file:
      - .env
    environment:
      DJANGO_DEBUG: False
    networks:
      # Connect Caddy to the shared network
      - proxy-network
      - internal-service-network
    depends_on:
      - database

networks:
  # Define the internal network for this stack (optional, but good practice)
  internal-service-network:
    driver: bridge

  # Reference the pre-existing external network shared with Caddy
  proxy-network: # The name here can be different, but the 'name' property must match
    name: caddy-proxy-network # Use the exact name created earlier
    external: true

volumes:
  postgres-data: